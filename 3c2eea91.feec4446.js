(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{145:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(2),o=n(9),i=(n(0),n(164)),r={title:"SRE Software Standards",description:"Standards for software development in SRE"},l={id:"standards/software",title:"SRE Software Standards",description:"Standards for software development in SRE",source:"@site/docs/standards/software.md",permalink:"/docs/standards/software",editUrl:"https://github.com/glasswall-sre/glasswall-sre.github.io/docs/standards/software.md",sidebar:"docs",previous:{title:"PRR",permalink:"/docs/products/rebuild-api/PRR"}},s=[{value:"Style guides",id:"style-guides",children:[{value:"Python",id:"python",children:[]}]},{value:"Code documentation",id:"code-documentation",children:[]},{value:"READMEs",id:"readmes",children:[]},{value:"API documentation",id:"api-documentation",children:[]},{value:"User interface documentation",id:"user-interface-documentation",children:[]},{value:"Config documentation",id:"config-documentation",children:[]},{value:"Other documentation",id:"other-documentation",children:[]},{value:"Python",id:"python-1",children:[]},{value:"Branch naming",id:"branch-naming",children:[]},{value:"Commit messages",id:"commit-messages",children:[]},{value:"Pull requests",id:"pull-requests",children:[]},{value:"Ignoring files",id:"ignoring-files",children:[]},{value:"Secrets",id:"secrets",children:[]},{value:"Gated build",id:"gated-build",children:[]},{value:"CI build (continuous integration)",id:"ci-build-continuous-integration",children:[]},{value:"CD build (continuous deployment)",id:"cd-build-continuous-deployment",children:[]}],c={rightToc:s};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"purpose"},"Purpose"),Object(i.b)("p",null,"In order to function effectively as a primarily engineering-focused team,\nwe need to have stringent standards for how our engineering is done.\nThis is to remove all ambiguity when it comes to how to go about engineering\nwork, as well as to make it easier for existing engineers and new joiners\nto get used to the way we write/manage/maintain software."),Object(i.b)("p",null,"This document will give an overview of our standards, and will evolve over\ntime as we expand our remit in terms of engineering work that we do."),Object(i.b)("p",null,"We have standards for the following areas:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#purpose"}),"Purpose")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#readme-standards"}),"README standards")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#code-style-standards"}),"Code style standards"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#style-guides"}),"Style guides"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#python"}),"Python"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#overrides"}),"Overrides")))))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#documentation-standards"}),"Documentation standards"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#code-documentation"}),"Code documentation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#readmes"}),"READMEs")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#api-documentation"}),"API documentation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#user-interface-documentation"}),"User interface documentation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#config-documentation"}),"Config documentation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#other-documentation"}),"Other documentation")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#testing-standards"}),"Testing standards"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#python-1"}),"Python")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#source-control-standards"}),"Source control standards"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#branch-naming"}),"Branch naming")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#commit-messages"}),"Commit messages")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#pull-requests"}),"Pull requests")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#ignoring-files"}),"Ignoring files")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#secrets"}),"Secrets")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#ci-and-cd-standards"}),"CI and CD standards"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#gated-build"}),"Gated build")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#ci-build-continuous-integration"}),"CI build (continuous integration)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#cd-build-continuous-deployment"}),"CD build (continuous deployment)")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#configuration-standards"}),"Configuration standards")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#code-review-standards"}),"Code review standards")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#logging-standards"}),"Logging standards"))),Object(i.b)("h1",{id:"readme-standards"},"README standards"),Object(i.b)("p",null,"All projects must have a README in the root of the project repository. This\nREADME serves to give people interested in the project a quick way of grokking\neverything they'll need to know about it."),Object(i.b)("p",null,"The structure should be as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-markdown"}),"# {Project title}\nOne paragraph description of project.\n\n## User guide\nA guide on how to use the software from a user perspective. This can be\nomitted if it's not user-facing software (i.e. a microservice or a cron\nlambda).\n\n### Installation\nHow to install the software.\n\n### Usage examples\nQuick examples of how to use the software.\n\n### Detailed guide\nMore detail of the usage goes here.\n\n## Developer guide\nInstructions to clone the repo and get started with developing the project.\n\n### Prerequisites\nA list of things you need to install to develop the project.\n\n### Quick start\nA (quick!) guide to getting the project up and running.\n\n### Documentation\nA link to the documentation of your project (if it has a link). This should\nbe something like an API reference.\n\n### Testing\nA guide to running tests that should (and can be) run locally. These are your\nunit and integration tests.\n\n### Deployment\nA guide on how to deploy the project.\n\n## Folder structure\nExplain the folder structure of your project in a hierarhical way with bullet points.\n\nAny other useful information you can think of.\n")),Object(i.b)("p",null,"You can put the sections in any order you want as long as it makes logical sense.\nYou can also omit sections if they aren't relevant to your project."),Object(i.b)("p",null,"All projects need to have a README. If a project does not have a README this is\nconsidered a bug. If a project has an empty README this is a bug. If a project\nhas an incomplete README this is a bug."),Object(i.b)("h1",{id:"code-style-standards"},"Code style standards"),Object(i.b)("p",null,"Generally code should follow Google style guides. If a Google style guide\ndoesn't exist for a particular language then follow the most commonly used\npublic style guide available. Do not write a new style guide for a language if\nyou can find a perfectly good one online, as it's a huge undertaking and\nthere's a lot that can and will be missed out on the first few iterations of\nwriting."),Object(i.b)("p",null,"If there is any conflicting sections in a style guide you find online (for\nexample, if an online style guide has a section that is also listed in these\nstandards), then please give these standards priority over the style guide."),Object(i.b)("p",null,"Below you can find our accepted style guides for each language that we use.\nIf in the future we start using a language that isn't listed here, please add\nit to this section and note the style guide that you have decided to use so\nfuture projects in this new language can keep their standards uniform."),Object(i.b)("h2",{id:"style-guides"},"Style guides"),Object(i.b)("h3",{id:"python"},"Python"),Object(i.b)("p",null,"Google's style guide: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://google.github.io/styleguide/pyguide.html"}),"https://google.github.io/styleguide/pyguide.html")),Object(i.b)("p",null,"There's a good example of usage here: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html"}),"https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/google/yapf"}),"YAPF")," to automatically format your code.\nWe recommend binding this to happen every time you save."),Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://pypi.org/project/pylint/"}),"Pylint")," to lint your code.")),Object(i.b)("h4",{id:"overrides"},"Overrides"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The character limit we use is 120, not Google's suggested 80.")),Object(i.b)("h1",{id:"documentation-standards"},"Documentation standards"),Object(i.b)("p",null,"We want to write documentation for almost everything we do as SREs. Whether it\nis code, processes, playbooks, incidents, postmortems, whatever. This section\nwill specifically cover documentation for things related to engineering."),Object(i.b)("h2",{id:"code-documentation"},"Code documentation"),Object(i.b)("p",null,"Documentation for code should be written in line with the style guide that is\nbeing used. If the style guide for some reason omits documentation, then you\nstill need to write docstrings and comments for code. A suggestion for if\ndocumentation is omitted from the style guide would be to write docstrings in\na format that can be read by some docstring generation tool (like\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.doxygen.nl/"}),"Doxygen"),"). The aim is for API references to be\nautomatically generated for any code that we write."),Object(i.b)("p",null,"All public and private interfaces ",Object(i.b)("strong",{parentName:"p"},"MUST")," have docstrings."),Object(i.b)("p",null,"Inline/block comments should be used where code needs it. Use your common\nsense. Don't over comment."),Object(i.b)("h2",{id:"readmes"},"READMEs"),Object(i.b)("p",null,"READMEs should be written in line with the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#readme-standards"}),"README standards"),"."),Object(i.b)("h2",{id:"api-documentation"},"API documentation"),Object(i.b)("p",null,"If your application exposes any APIs be it HTTP, REST, RPC, or any other, then\nit must be documented. Documentation should be generated from some kind of spec\nusing something like ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://swagger.io/"}),"Swagger")," for example. For simple\nAPIs a section in the README in the user guide will be fine."),Object(i.b)("h2",{id:"user-interface-documentation"},"User interface documentation"),Object(i.b)("p",null,"If your app has a user interface (for example, a CLI or a GUI) then the usage\nof this should be documented."),Object(i.b)("p",null,"This could be as simple as a 'Usage' section in the README (see\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://kubernetes.io/docs/reference/kubectl/overview/#syntax"}),"here")," for example), or 'how-to' guides if your app has a GUI."),Object(i.b)("h2",{id:"config-documentation"},"Config documentation"),Object(i.b)("p",null,"If your application uses config files, you must provide example config files,\nas well as documentation of ",Object(i.b)("strong",{parentName:"p"},"EVERY")," field that can be used in the config."),Object(i.b)("h2",{id:"other-documentation"},"Other documentation"),Object(i.b)("p",null,"If your application uses any other things that can be documented (for example,\nit has DDL for a database or helm charts or anything) comments should be used\nwithin these files explaining anything that is not immediately clear."),Object(i.b)("h1",{id:"testing-standards"},"Testing standards"),Object(i.b)("p",null,"We expect your code to have tests to ensure it's working to the specification.\nOther parts of Glasswall use tests called 'L0', 'L1' etc, we do not.\nWe generally use unit and integration tests. We expect code coverage to be\n60% for existing code, and 80% for new code committed."),Object(i.b)("p",null,"We use ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://codecov.io/gh/glasswall-sre"}),"Codecov")," and\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://sonarcloud.io/organizations/glasswall-cloud-key-a42w31/projects?sort=-analysis_date"}),"SonarCloud"),"\nto measure code coverage."),Object(i.b)("h2",{id:"python-1"},"Python"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.pytest.org/en/stable/"}),"Pytest")," and ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://pypi.org/project/pytest-cov/"}),"Pytest-Cov")," to test your code and get code coverage.")),Object(i.b)("h1",{id:"source-control-standards"},"Source control standards"),Object(i.b)("p",null,"In order for our CI/CD pipelines to function effectively, we as a team need to\nhave well-defined guidelines for how we use source control. Good source control\npractice also helps organise/track work items effectively."),Object(i.b)("p",null,"All source control repositories must be Git repositories."),Object(i.b)("p",null,"All repositories adhere to the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow"}),"feature branch workflow"),"."),Object(i.b)("h2",{id:"branch-naming"},"Branch naming"),Object(i.b)("p",null,"Branches should be named in the following format:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"{initials}/{feature-description}\n")),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"sg/fix-queue-bug\n")),Object(i.b)("p",null,"The reason for this is so that you can identify whose branch it is, the\nbacklog item it's related to, and a short description of the feature."),Object(i.b)("h2",{id:"commit-messages"},"Commit messages"),Object(i.b)("p",null,"Commit messages should be in the following format:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"#{issue-number}: {message}\n")),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"#98765: Add error checking to queue pushing code\n")),Object(i.b)("p",null,"The reason for this is so that you can see which issue it's related to\n(and Azure DevOps will automatically pick this up and link it for you)."),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://chris.beams.io/posts/git-commit/"}),"Here is"),' some good advice for\nwriting for writing commit messages. The commit message should read as\n"this commit will {message}". For example, "this commit will add error\nchecking to queue pushing code". Writing the commit as "added error checking\nto queue pushing code" would be incorrect, as it would read "this commit will\nadded error checking to queue pushing code".'),Object(i.b)("p",null,"This seems pedantic, but it really helps out when reading the git log."),Object(i.b)("p",null,"Another good source of information for writing commit messages is\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://google.github.io/eng-practices/review/developer/cl-descriptions.html"}),"Google's advice"),".\nPlease note that Google refers to these as a 'CL', or 'change list'."),Object(i.b)("h2",{id:"pull-requests"},"Pull requests"),Object(i.b)("p",null,"Feature branches are pushed to, and when the feature is complete, a\npull request is created to request that the feature changes are 'pulled' into\nthe master branch."),Object(i.b)("p",null,"Pull requests will need to be reviewed and approved by another member of the\nteam before they are able to be merged. Additionally, a gated build should\nbe run and only allow the PR to be merged if it builds successfully. For more\ninformation please see the section on ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#ci-and-cd-standards"}),"CI/CD standards"),"."),Object(i.b)("h2",{id:"ignoring-files"},"Ignoring files"),Object(i.b)("p",null,"All repos should have ",Object(i.b)("inlineCode",{parentName:"p"},".gitignore")," files in order to ignore any files that\nshould not be put in source control. A very easy way to generate these is by\nusing ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://gitignore.io/"}),"http://gitignore.io/"),"."),Object(i.b)("h2",{id:"secrets"},"Secrets"),Object(i.b)("p",null,"Secrets ",Object(i.b)("strong",{parentName:"p"},"SHOULD NOT")," be stored in source control. Under any circumstances.\nIf you're ever thinking of putting one in source control, have a long walk,\ntake a breather, and then find an alternate solution to whatever it is you\nthink you're doing. Because it's not right."),Object(i.b)("p",null,"If you accidentally commit a secret to source control, deleting the file and\ncommitting again will not remove it. With access to the repo, someone can still\nroll back and find the secret. You will need to go back and remove this file\nfrom the cache. You also need to revoke the secret you committed, as you should\nconsider it to be automatically compromised.\nThis is a massive pain to do, and takes up a lot of time. So\nthe simple solution is to ",Object(i.b)("strong",{parentName:"p"},"NOT STORE SECRETS IN SOURCE CONTROL"),"."),Object(i.b)("p",null,"If you ever need to remove a secret you've accidentally committed, see\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://help.github.com/en/articles/removing-sensitive-data-from-a-repository"}),"the advice here"),". But you shouldn't need to, right?"),Object(i.b)("h1",{id:"ci-and-cd-standards"},"CI and CD standards"),Object(i.b)("p",null,"All source controlled code projects need to have Azure DevOps pipelines for\nboth building and releasing the code. Standards won't get too specific here,\nas a lot of the actions that occur in a pipeline are quite bespoke and will\nvary a lot depending on what is being built and where it's being deployed\nto."),Object(i.b)("h2",{id:"gated-build"},"Gated build"),Object(i.b)("p",null,"This pipeline builds code from pull requests onto the master branch. Any code\nthat is requested to be merged onto the master branch must trigger a gated\nbuild to run, which runs tests and validation on the repository to make sure\nbroken code/invalid config isn't being merged into master."),Object(i.b)("p",null,"This build is set up on the master branch's branch policy to run as a build\nvalidation step. If the build fails then the code will not be allowed to be\nmerged into master."),Object(i.b)("p",null,"It should also check code coverage with services like Codecov and SonarCloud,\nrejecting the PR if it's not up to scratch."),Object(i.b)("h2",{id:"ci-build-continuous-integration"},"CI build (continuous integration)"),Object(i.b)("p",null,"This pipeline builds code off of new commits to the master branch. Any time\nthere are new commits available in the master branch it should automatically\ntrigger and generate an artifact for the project with everything that will be\nneeded to deploy it."),Object(i.b)("p",null,"These artifacts are kept in storage so that we can release new deployments and\nroll back to old ones at whim."),Object(i.b)("h2",{id:"cd-build-continuous-deployment"},"CD build (continuous deployment)"),Object(i.b)("p",null,"When an artifact is ready after the CI build, it needs to be deployed\nsomewhere -- this is what release pipelines are for. Due to the fact that\nprojects are going to vary so much in terms of where they're being deployed to\nas well as how they should be deployed, it's difficult to write standards for\nthis currently."),Object(i.b)("p",null,"In general, the CD build needs to be:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"easy to roll back in the event of a failure"),Object(i.b)("li",{parentName:"ul"},"repeatable and idempotent"),Object(i.b)("li",{parentName:"ul"},"should require SRE approval to release to a production environment with many customers")),Object(i.b)("h1",{id:"configuration-standards"},"Configuration standards"),Object(i.b)("p",null,"A lot of the software we write will require configuration files. It's important\nthat these configuration files are standardised among all of our projects, so\nthings don't start to get too different."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Configuration files should be in YAML wherever possible"),Object(i.b)("li",{parentName:"ul"},"All configuration values should be well documented"),Object(i.b)("li",{parentName:"ul"},"Example configuration files must be provided")),Object(i.b)("h1",{id:"code-review-standards"},"Code review standards"),Object(i.b)("p",null,"We will follow Google's standards for how to do code reviews: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://google.github.io/eng-practices/review/reviewer/"}),"https://google.github.io/eng-practices/review/reviewer/")),Object(i.b)("p",null,"If you need some advice on how to have your code reviewed, again, ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://google.github.io/eng-practices/review/developer/handling-comments.html"}),"Google has\nus covered"),"."),Object(i.b)("h1",{id:"logging-standards"},"Logging standards"),Object(i.b)("p",null,"The general accepted format for a log string is the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"{UTC-timestamp} [{log-level}] <{file}:{line-number}> {message}\n")),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-log"}),"2019-09-06 10:47:50.099Z [DEBUG] <mailsend.py:13> Hello world!\n")))}d.isMDXComponent=!0},164:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=d(n),p=a,h=b["".concat(r,".").concat(p)]||b[p]||u[p]||i;return n?o.a.createElement(h,l(l({ref:t},c),{},{components:n})):o.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);